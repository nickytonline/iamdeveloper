---
import { CollectionEntry, getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = (
    await Promise.all([
      getCollection('blog'),
      getCollection('vscodetips'),
      getCollection('newsletter'),
    ])
  ).flat();
  const tags = [...new Set(allPosts.map((post) => post.data.tags).flat())];

  return tags.map((tag) => {
    const posts = allPosts
      // @ts-ignore TODO: Fix type for for when the tags only explicitly include 'newsletter'
      .filter((post) => post.data.tags.includes(tag))
      .sort(
        (post1, post2) =>
          Date.parse(post2.data.date) - Date.parse(post1.data.date)
      );
    return {
      params: { tag },
      props: { posts },
    };
  });
}

// I shouldn't need to explicity type entry. Look into this.
const posts: CollectionEntry<'blog' | 'newsletter' | 'vscodetips'>[] =
  Astro.props.posts;
const { tag } = Astro.params;
---

<article>
  <h1>Posts tagged with {tag}</h1>
  <ul>
    {
      posts.map(({ slug, data: { title, date } }) => (
        <li>
          <article>
            <h2>
              <a href={`/blog/${slug}`}>{title}</a>
            </h2>
            <date datetime={date}>{new Date(date).toDateString()}</date>
          </article>
        </li>
      ))
    }
  </ul>
</article>
