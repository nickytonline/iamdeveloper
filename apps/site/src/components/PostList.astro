---
import type { CollectionEntry } from 'astro:content';
import DateTime from './DateTime.astro';

export type Props = { title: string } & (
  | {
      posts: CollectionEntry<'blog'>[];
      postType: 'blog';
    }
  | {
      posts: CollectionEntry<'vscodetips'>[];
      postType: 'vscodetips';
    }
  | {
      posts: CollectionEntry<'newsletter'>[];
      postType: 'newsletter';
    }
);

type Template = typeof Astro.props.postType;

function getUrl(template: Template, slug: string) {
  switch (template) {
    case 'blog':
      return `/blog/${slug}`;
    case 'vscodetips':
      return `/vscode-tips/${slug}`;
    case 'newsletter':
      return `/newsletter/${slug}`;
    default:
      throw new Error(`Unknown template: ${template}`);
  }
}

Astro.props;
const { title, posts, postType } = Astro.props;
---

<section class="post-list pad-top-700 gap-bottom-900">
  <div class="inner-wrapper sf-flow">
    <h2 class="post-list__heading text-700 md:text-800">{title}</h2>
    <ol class="post-list__items sf-flow pad-top-300" reversed>
      {
        posts.map((item) => {
          return (
            <li class="post-list__item">
              <h3 class="font-base leading-tight text-600 weight-mid">
                <a
                  href={getUrl(postType, item.slug)}
                  class="post-list__link"
                  rel="bookmark"
                >
                  {item.data.title}
                </a>
              </h3>
              <p class="text-500 gap-top-300 weight-mid">
                <DateTime date={new Date(item.data.date)} />
              </p>
            </li>
          );
        })
      }
    </ol>
  </div>
</section>
